import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { router, useLocalSearchParams } from 'expo-router';
import React from 'react';
import { ScrollView, StyleSheet, View } from 'react-native';

export default function OrderConfirmationScreen() {
  const params = useLocalSearchParams();
  const total = typeof params.total === 'string' ? params.total : undefined;
  const discount = typeof params.discount === 'string' ? params.discount : undefined;
  const tip = typeof params.tip === 'string' ? params.tip : undefined;
  const paid = typeof params.paid === 'string' ? params.paid : undefined;
  const applied = params.applied === 'true';
  const orderId = typeof params.orderId === 'string' ? params.orderId : undefined;

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <ThemedView style={styles.titleContainer}>
        <IconSymbol size={40} name="checkmark.seal.fill" color="#1976D2" />
        <ThemedText type="title">Order Confirmed</ThemedText>
      </ThemedView>
      <ThemedView style={styles.card}>
        {orderId ? (
          <Row label="Order ID" value={orderId} />
        ) : null}
        <ThemedText>Your order has been placed successfully.</ThemedText>
        {applied ? (
          <ThemedText type="defaultSemiBold">10% first-order discount applied.</ThemedText>
        ) : null}
        {discount ? (
          <Row label="Discount" value={`-$${discount}`} />
        ) : null}
        {total ? (
          <Row label="Order Total" value={`$${total}`} />
        ) : null}
        {tip ? (
          <Row label="Tip" value={`$${tip}`} />
        ) : null}
        {paid ? (
          <Row label="Total Paid" value={`$${paid}`} bold />
        ) : null}
      </ThemedView>
      <View style={styles.actions}>
        <ThemedText type="link" onPress={() => router.replace('/(tabs)/menu')}>Continue shopping</ThemedText>
      </View>
    </ScrollView>
  );
}

function Row({ label, value, bold }: { label: string; value: string; bold?: boolean }) {
  return (
    <View style={styles.rowBetween}>
      <ThemedText type={bold ? 'subtitle' : 'default'}>{label}</ThemedText>
      <ThemedText type={bold ? 'subtitle' : 'default'}>{value}</ThemedText>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingTop: 64,
    paddingHorizontal: 12,
    paddingBottom: 16,
  },
  titleContainer: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
  },
  card: {
    gap: 8,
    paddingVertical: 12,
  },
  rowBetween: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 4,
  },
  actions: {
    marginTop: 16,
  },
});


